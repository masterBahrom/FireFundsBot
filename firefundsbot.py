import re
import json
import math
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram import F
import asyncio
import os
from aiohttp import web

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")


bot = Bot(token=API_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
#@app.on_event("startup")
#async def on_startup():
   # await bot.set_webhook(WEBHOOK_URL)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@app.post("/")
async def handle_update(update: dict):
    telegram_update = Update.model_validate(update)
    await dp.feed_update(bot, telegram_update)
    
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CHAT_ID_FILE = "chat_ids.json"

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞.
def load_chat_ids():
    try:
        with open(CHAT_ID_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª.
def save_chat_id(username, chat_id):
    data = load_chat_ids()
    data[f"@{username}"] = chat_id  
    with open(CHAT_ID_FILE, "w") as file:
        json.dump(data, file)
      
#  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç, –≤—ã–¥–µ–ª—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
def process_text(message_text):
    activities = []
    participants = []
    
    parts = message_text.split('–£—á–∞—Å—Ç–Ω–∏–∫–∏:')
    activities_text = parts[0].strip()
    participants_text = parts[1].strip() if len(parts) > 1 else ""
    
    activity_lines = activities_text.splitlines()
    for line in activity_lines:
        match = re.match(r'([A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+) - (\d+) - (@\w+)', line)
        if match:
            activity_name = match.group(1).strip()
            amount = int(match.group(2))
            payer = match.group(3).strip()
            activities.append({"name": activity_name, "amount": amount, "payer": payer})
    
    participants = participants_text.splitlines()
    return activities, participants
  
#–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –∏–ª–∏ –∫–æ–º—É –¥–æ–ª–∂–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏.
def calculate_payments(activities, participants):
    total_sum = sum([activity['amount'] for activity in activities])
    num_participants = len(participants)
    share_per_participant = math.floor(total_sum / num_participants)
    
    payments = {}
    for participant in participants:
        total_paid = sum([activity['amount'] for activity in activities if activity['payer'] == participant])
        balance = total_paid - share_per_participant
        payments[participant] = -balance
    
    return payments

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö.
async def send_payment_info(message: Message, payments):
    chat_ids = load_chat_ids()
    for participant, amount in payments.items():
        if amount > 0:
            text = f"{participant}, –≤—ã –¥–æ–ª–∂–Ω—ã –æ–ø–ª–∞—Ç–∏—Ç—å: {amount}\n–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ - https://cpay.me/971547437161?amount={amount} –∏–ª–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç - https://t.me/c/2053760794/1/3164"
        else:
            text = f"{participant}, –≤–∞–º –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å: {-amount}\n–ó–∞–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —É @master_bahrom"
        
        if participant in chat_ids:
            await bot.send_message(chat_ids[participant], text)
        else:
            await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è {participant}, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        await message.answer(text)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ chat_id.
@dp.message(Command("me"))
async def register_user(message: Message):
    save_chat_id(message.from_user.username, message.chat.id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º –∏ –ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ üòÇ\n\n"
        "–≠–¢–û –®–£–¢–ö–ê!\n\n"
        "–ú—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å–∞–ª–∏ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–º—É –∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ò∫Ô∏è"
    )
  
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏.
@dp.message()
async def handle_text(message: Message):
    text = message.text
    activities, participants = process_text(text)
    payments = calculate_payments(activities, participants)
    await send_payment_info(message, payments)

async def handle(request):
    return web.Response(text="I'm alive!")

app = web.Application()
app.router.add_get("/", handle)

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞."""
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ Render
    site = web.TCPSite(runner, "0.0.0.0", port)await site.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

