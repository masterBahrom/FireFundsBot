import re
import json
import math
import os
import asyncio
import uvicorn
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, Update
from aiogram.utils.markdown import hbold
from aiogram import F
from aiohttp import web

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü—Ä–∏–º–µ—Ä: "https://your-app.onrender.com"
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CHAT_ID_FILE = "chat_ids.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞.
def load_chat_ids():
    try:
        with open(CHAT_ID_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª.
def save_chat_id(username, chat_id):
    data = load_chat_ids()
    data[f"@{username}"] = chat_id  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ @ –ø–µ—Ä–µ–¥ username
    with open(CHAT_ID_FILE, "w") as file:
        json.dump(data, file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–µ–ª—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
# –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: "–ó–∞ —á—Ç–æ - –°—Ç–æ–∏–º–æ—Å—Ç—å - –ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª - –ó–∞ –∫–æ–≥–æ –æ–ø–ª–∞—Ç–∏–ª"
def process_text(message_text):
    activities = []
    participants = []
    
    parts = message_text.split("–£—á–∞—Å—Ç–Ω–∏–∫–∏:")
    activities_text = parts[0].strip()
    participants_text = parts[1].strip() if len(parts) > 1 else ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    activity_lines = activities_text.splitlines()
    for line in activity_lines:
        match = re.match(r"([A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+)\s*-\s*(\d+)\s*-\s*(@\w+)\s*-\s*(.+)", line)
        if match:
            activity_name = match.group(1).strip()
            amount = int(match.group(2))
            payer = match.group(3).strip()
            for_whom = match.group(4).strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            activities.append({
                "name": activity_name,
                "amount": amount,
                "payer": payer,
                "for_whom": for_whom
            })
    
    participants = participants_text.splitlines()
    return activities, participants

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π.
# –ê–ª–≥–æ—Ä–∏—Ç–º:
# 1. –î–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 
#    - –ï—Å–ª–∏ "for_whom" —Ä–∞–≤–µ–Ω "all", —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–ª–∏—Ç—Å—è –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
#    - –ò–Ω–∞—á–µ, —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É, —á–µ–π username —É–∫–∞–∑–∞–Ω.
# 2. –û—Ç–¥–µ–ª—å–Ω–æ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è, —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ–ø–ª–∞—Ç–∏–ª.
# 3. –ë–∞–ª–∞–Ω—Å = (–æ–ø–ª–∞—á–µ–Ω–æ) - (–æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞).
def calculate_payments(activities, participants):
    expected = {participant: 0 for participant in participants}
    paid = {participant: 0 for participant in participants}
    
    for activity in activities:
        amount = activity["amount"]
        payer = activity["payer"]
        target = activity["for_whom"]  # —É–∂–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        if target == "all":
            share = math.floor(amount / len(participants))
            for participant in participants:
                expected[participant] += share
        else:
            for participant in participants:
                if participant.lower() == target:
                    expected[participant] += amount
        if payer in paid:
            paid[payer] += amount
    
    payments = {}
    for participant in participants:
        balance = paid[participant] - expected[participant]
        payments[participant] = balance
    return payments

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
async def send_payment_info(message: Message, payments):
    chat_ids = load_chat_ids()
    for participant, balance in payments.items():
        if balance > 0:
            text = f"{participant}, –≤–∞–º –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å: {balance}\n–ó–∞–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —É @master_bahrom"
        else:
            text = f"–≠—Ç–æ –±—ã–ª–∏ —Å—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –û—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –≤—ã —Å–º–æ–≥–ª–∏ –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n{participant}, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {-balance}\n–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ - https://cpay.me/971547437161?amount={-balance}"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if participant in chat_ids:
            await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {participant} –≤ —á–∞—Ç {chat_ids[participant]}: {text}")
            await bot.send_message(chat_ids[participant], text)
        else:
            await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è {participant}, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /me –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@dp.message(Command("me"))
async def register_user(message: Message):
    save_chat_id(message.from_user.username, message.chat.id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º –∏ –ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ üòÇ\n\n"
        "–≠–¢–û –®–£–¢–ö–ê!\n\n"
        "–ú—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å–∞–ª–∏ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–º—É –∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ò∫Ô∏è"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π.
@dp.message()
async def handle_text(message: Message):
    text = message.text
    activities, participants = process_text(text)
    payments = calculate_payments(activities, participants)
    await send_payment_info(message, payments)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤.
app = FastAPI()

@app.get("/")
async def root():
    return {"message": "I'm alive!"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram.
@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    update_data = await request.json()
    update = Update.model_validate(update_data)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    asyncio.create_task(dp.feed_update(bot, update))
    return {"ok": True}

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫.
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.delete_webhook()
    await bot.set_webhook(webhook_url)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫.
@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=PORT, log_level="info")
